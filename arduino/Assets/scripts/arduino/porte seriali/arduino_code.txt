/*
  Sketch di esempio per comunicare dati a Arduino usando il seriale, il quale mostra questi ultimi su un piccolo monitor usando la libreria U8x8lib.
  Link a documentazione schermo : https://github.com/olikraus/u8g2/wiki/u8x8reference
  Link a documentazione fonts : https://github.com/olikraus/u8g2/wiki/fntlist8x8
  Samuele Cigardi per NABA 2020
*/

// Tutti i Serial.print segnati come debug, non sono dati necessari per la comunicazione con unity, quindi andrebbero rimossi nel vostro codice finale.

#include <Arduino.h>
#include <U8x8lib.h>
 
 U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);
 
// U8X8_SSD1306_128X64_NONAME_SW_I2C u8x8(/* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);   // OLEDs without Reset of the Display

String inputString = "";         // a String to hold incoming data
bool stringComplete = false;  // whether the string is complete

String ScreenString = "";

int letterCount;
 
void setup() {
  // initialize serial:
  Serial.begin(9600);
  
  // Inizializza lo schermo
  //u8x8.setBusClock(100000);  // If you breakout other modules, please enable this line
  u8x8.begin();
  u8x8.setFlipMode(1);
}
 
void loop() {

  if(stringComplete){
    if(inputString.substring(0,2) == "dt"){
    String Dato1 = getValue(inputString,'/',0);
    //String Dato2 = getValue(inputString,'/',1);
     u8x8.setFont(u8x8_font_courB18_2x3_f);
    u8x8.setCursor(0, 0);
    u8x8.print(Dato1.substring(2));

  /* u8x8.setFont(u8x8_font_courB18_2x3_f);
    u8x8.setCursor(0, 4);
    u8x8.print(Dato2);*/

    }/*else{
      u8x8.clear();
    }*/
  }
   int potValue = analogRead(A0);
  int buttonValue = digitalRead(6);
  String sensorValue = "";
  sensorValue += "Data";
  sensorValue += "/";
  sensorValue += String(potValue);

  sensorValue += "/";
  sensorValue += String(buttonValue);

  Serial.println(sensorValue); 

   inputString = "";
    stringComplete = false;
  }     
  


String getValue(String data, char separator, int index)
{
  int found = 0;
  int strIndex[] = {0, -1};
  int maxIndex = data.length()-1;

  for(int i=0; i<=maxIndex && found<=index; i++){
    if(data.charAt(i)==separator || i==maxIndex){
        found++;
        strIndex[0] = strIndex[1]+1;
        strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }

  return found>index ? data.substring(strIndex[0], strIndex[1]) : "";
}
/*
  SerialEvent occurs whenever a new data comes in the hardware serial RX. This
  routine is run between each time loop() runs, so using delay inside loop can
  delay response. Multiple bytes of data may be available.
  This version of serial event has been customized by Samuele Cigardi to remove NL and CR chars,
  so the result is easier to be processed by the students.
*/
void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    
    if (inChar == '\n') {     
      stringComplete = true;
    }
    else if (inChar != '\r'){   
      // add it to the inputString:
      inputString += inChar;     
    }
  }
}